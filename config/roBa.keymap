#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define MOUSE 7
#define SCROLL 4
#define NUM 5

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Copy {
            bindings = <&kp LC(C)>;
            key-positions = <30 31>;
        };

        Paste {
            bindings = <&kp LC(V)>;
            key-positions = <31 32>;
        };

        Cut {
            bindings = <&kp LC(X)>;
            key-positions = <30 32>;
        };

        Save {
            bindings = <&kp LC(S)>;
            key-positions = <11 12>;
        };

        Find {
            bindings = <&kp LC(F)>;
            key-positions = <12 13>;
        };

        Return {
            bindings = <&kp LC(Z)>;
            key-positions = <23 24>;
        };

        Advance {
            bindings = <&kp LC(Y)>;
            key-positions = <24 25>;
        };

        Tilde {
            bindings = <&kp TILDE>;
            key-positions = <6 7>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <7 8>;
        };

        Explorer {
            bindings = <&kp LG(E)>;
            key-positions = <2 13>;
        };

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <11 13>;
        };

        Tog_Qwerty {
            bindings = <&tog 0>;
            key-positions = <34 42>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        M01: M01 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp V &kp E &kp N &kp G &kp E &kp D &kp N4 &kp N0 &kp LS(F) &kp O &kp L &kp D &kp ENTER>;
            label = "M01";
        };

        M02: M02 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp V &kp E &kp N &kp G &kp E &kp D &kp N8 &kp N9 &kp LS(F) &kp O &kp L &kp D &kp ENTER>;
            label = "M02";
        };

        M03: M03 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp V &kp E &kp N &kp G &kp E &kp D &kp N1 &kp LS(F) &kp O &kp L &kp D &kp ENTER>;
            label = "M03";
        };

        M04: M04 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp V &kp E &kp N &kp G &kp E &kp D &kp N2 &kp LS(F) &kp O &kp L &kp D &kp ENTER>;
            label = "M04";
        };

        M05: M05 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M05";
        };

        M06: M06 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(K) &kp LS(D) &kp E &kp V &kp AT &kp N2 &kp N3 &kp N1 &kp N0 &kp ENTER>;
            label = "M06";
        };

        M07: M07 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(M) &kp C &kp O &kp N2 &kp N0 &kp N2 &kp N3 &kp N1 &kp N0 &kp EXCL &kp ENTER>;
            label = "M07";
        };

        M08: M08 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(D) &kp T &kp C &kp N2 &kp K &kp A &kp N &kp P &kp O &kp UNDER &kp N2 &kp N0 &kp N2 &kp N4 &kp UNDER &kp EXCL &kp POUND &kp ENTER>;
            label = "M08";
        };

        M09: M09 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M09";
        };

        M10: M10 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(K) &kp A &kp M &kp P &kp O &kp S &kp O &kp L &kp N2 &kp N0 &kp N1 &kp N7 &kp ENTER>;
            label = "M10";
        };

        M11: M11 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M11";
        };

        M12: M12 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M12";
        };

        M13: M13 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M13";
        };

        M14: M14 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M14";
        };

        M15: M15 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M15";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 6 Q           &kp W         &kp E         &kp R        &kp T                                      &kp Y        &kp U  &kp I      &kp O    &lt 6 P
&lt 7 A           &kp S         &kp D         &kp F        &kp G        &kp K_MUTE     &kp MINUS      &kp H        &kp J  &kp K      &kp L    &lt 7 SEMICOLON
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V        &kp B        &kp COLON      &kp SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt 2 SPACE  &lt 3 SPACE  &lt 5 GRAVE    &kp BACKSPACE  &lt 3 ENTER                             &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOLUME_DOWN>;
        };

        Astarte {
            bindings = <
&lt 6 Q           &kt P         &kt U          &kp Y        &kp COMMA                                                &kp J        &kp D  &kp H  &kp G  &lt 6 W
&lt 7 I           &kp O         &kp E          &kp A        &kp PERIOD   &trans                       &kp MINUS      &kp K        &kp T  &kp N  &kp S  &lt 7 R
&mt LEFT_SHIFT Z  &kp X         &kp SEMICOLON  &kp C        &kp SLASH    &trans                       &trans         &kp M        &kp L  &kp F  &kp B  &mt RIGHT_SHIFT V
&kp LCTRL         &kp LEFT_GUI  &kp LEFT_ALT   &lt 2 SPACE  &lt 3 SPACE  &lt 5 LANG_ZENKAKUHANKAKU    &kp BACKSPACE  &lt 3 ENTER                       &kp RCTRL
            >;
        };

        FUNCTION {
            bindings = <
&kp F1   &kp F2        &kp F3            &kp F4      &kp F5                                   &kp F6                &kp F7                 &kp F8            &kp F9             &kp F10
&kp TAB  &kp LA(TAB)   &kp LC(LEFT_ALT)  &kp LA(F4)  &kp LEFT_ALT  &trans    &trans           &kp AT_SIGN           &kp UNDERSCORE         &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp COLON
&trans   &trans        &trans            &kp F11     &kp F12       &trans    &trans           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH
&trans   &kp LEFT_GUI  &kp LEFT_ALT      &trans      &trans        &trans    &kp EXCLAMATION  &kp QUESTION                                                                      &kt PIPE
            >;
        };

        NUM_ARROW {
            bindings = <
&kp ESCAPE  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp ASTERISK                                    &mkp MB4       &mkp MB5        &mkp MB3        &kp LC(W)        &kp LG(UP_ARROW)
&kp SLASH   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS     &trans                &trans      &kp PAGE_UP    &mkp MB1        &kp UP_ARROW    &mkp MB2         &kp LG(DOWN_ARROW)
&trans      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS      &trans                &trans      &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans      &kp NUMBER_0  &kp DOT       &kp LG(X)     &kp KP_ENTER  &kp LC(LA(DELETE))    &kp DELETE  &trans                                                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &mkp MB3  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &mo 5     &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                &trans
            >;
        };

        MACRO {
            bindings = <
&trans            &trans  &trans  &trans  &trans                       &M11    &M12  &M13  &M14  &M15
&trans            &trans  &trans  &trans  &kp LCTRL  &trans    &trans  &M06    &M07  &M08  &M09  &M10
&trans            &trans  &trans  &trans  &trans     &trans    &trans  &M01    &M02  &M03  &M04  &M05
&kp LS(CAPSLOCK)  &trans  &trans  &trans  &trans     &trans    &trans  &trans                    &kp LS(F10)
            >;
        };

        DEVICE_CONTROL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bootloader   &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &out OUT_BLE  &out OUT_USB                                            &bt BT_CLR_ALL
            >;
        };

        ANYTHING {
            bindings = <
&trans  &kp LG(PRINTSCREEN)     &kp LA(PRINTSCREEN)      &kp LS(LG(S))  &trans                    &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)   &kp LC(UP_ARROW)    &trans               &trans
&trans  &kp LA(LC(LEFT_ARROW))  &kp LA(LC(RIGHT_ARROW))  &trans         &trans  &trans    &trans  &kp LC(HOME)     &kp LC(LEFT_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(RIGHT_ARROW)  &trans
&trans  &kp LS(LG(LEFT_ARROW))  &kp LS(LG(RIGHT_ARROW))  &trans         &trans  &trans    &trans  &kp LC(END)      &trans              &trans              &trans               &trans
&trans  &trans                  &trans                   &trans         &trans  &trans    &trans  &trans                                                                        &trans
            >;
        };
    };
};
